server:
  port: ${PORT:8080}
spring:
  application:
    name: booking-receipts-ms
  config:
    import: optional:file:.env[.properties]
  kafka:
    bootstrap-servers: ${KAFKA_URL}
    consumer:
      group-id: receipts-ms
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
    producer:
      retries: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    topics:
      BOOKING_CREATED_TOPIC: BOOKING_CREATED_TOPIC
      BOOKING_RECEIPT_GENERATED_TOPIC: BOOKING_RECEIPT_GENERATED_TOPIC

resilience4j:
  circuitbreaker:
    instances:
      users-service:
        register-health-indicator: true
        sliding-window-size: 5
        sliding-window-type: count_based
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        automatic-transition-from-open-to-half-open-enabled: true
        permitted-number-of-calls-in-half-open-state: 3
        ignored-exceptions:
          - feign.FeignException$FeignClientException
      rooms-service:
        register-health-indicator: true
        sliding-window-size: 5
        sliding-window-type: count_based
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        automatic-transition-from-open-to-half-open-enabled: true
        permitted-number-of-calls-in-half-open-state: 3
        ignored-exceptions:
          - feign.FeignException$FeignClientException
          -
client:
  users-ms:
    url: ${USERS_MS_URL}
  rooms-ms:
    url: ${ROOMS_MS_URL}

cloud:
  aws:
    s3:
      region: ${S3_BUCKET_REGION:sa-east-1}
      bucket:
        name: ${S3_BUCKET_NAME:filesystem}